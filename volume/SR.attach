#!/usr/bin/env ocamlscript
Ocaml.sources := ["common.ml"; "lvm.ml"];
Ocaml.packs := ["xapi-storage"; "cmdliner"; "re.str"; "oUnit"; "uri"];
Ocaml.ocamlflags := ["-thread"]
--
(*
 * Copyright (C) Citrix Systems Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation; version 2.1 only. with the special
 * exception on linking described in file LICENSE.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *)
open Common

module Command = struct
  open Storage.Volume.Types
  include SR.Attach

  let command common { SR.Attach.In.dbg; uri } =
    let vg = vg_of_uri uri in
    let vgs = Lvm.vgs () in
    if not(List.mem vg vgs)
    then raise (Storage.Volume.SR_does_not_exist vg);
    vg
end

module Test = struct
  open OUnit

  let test_vgs () =
    let vol = Lvm.make_temp_volume () in
    let vg_name = "hello" in
    finally
      (fun () ->
        Lvm.vgcreate vg_name [ vol ];
        let vgs = Lvm.vgs () in
        if not(List.mem vg_name vgs)
        then failwith (Printf.sprintf "%s not in vgs list: [%s]" vg_name (String.concat "; " vgs))
      ) (fun () ->
        Lvm.remove_temp_volume vol
      )

  let test common =
    let suite = "attach" >::: [
      "vgs" >:: test_vgs;
    ] in
    ignore(run_test_tt ~verbose:common.Common.verbose suite)

end

module M = Make(Command)(Test)
let _ = M.main ()
