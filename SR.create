#!/usr/bin/env ocamlscript
Ocaml.sources := ["common.ml"; "lvm.ml"];
Ocaml.packs := ["xcp.storage"; "oUnit"; "cmdliner"; "re.str"];
Ocaml.ocamlflags := ["-thread"]
--
(*
 * Copyright (C) Citrix Systems Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation; version 2.1 only. with the special
 * exception on linking described in file LICENSE.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *)

open Common

let create_vg vg_name = function
  | [] -> failwith "I need at least 1 physical device to create a volume group"
  | d :: ds as devices ->
    List.iter
      (fun dev ->
        (* First destroy anything already on the device *)
        ignore_string (run "dd" [ "if=/dev/zero"; "of=" ^ dev; "bs=512"; "count=4" ]);
        ignore_string (run "pvcreate" [ "--metadatasize"; "10M"; dev ])
      ) devices;

    (* Create the VG on the first device *)
    ignore_string (run "vgcreate" [ vg_name; d ]);
    List.iter (fun dev -> ignore_string (run "vgextend" [ vg_name; dev ])) ds;
    ignore_string (run "vgchange" [ "-an"; vg_name ])

open OUnit

let test_vgcreate () =
  let tmp = Lvm.make_temp_volume () in
  create_vg "hello" [ tmp ];
  Lvm.remove_temp_volume tmp

let test common =
  let suite = "create" >::: [
    "vgcreate" >:: test_vgcreate;
  ] in
  ignore(run_test_tt ~verbose:common.Common.verbose suite)

let create common =
  if common.Common.test then test common;
  `Ok ()

(* Command-line parsing *)
open Cmdliner

let cmd =
  let doc = "create a storage repository" in
  let man = help in
  Term.(ret (pure create $ common_options_t)),
  Term.info Sys.argv.(0) ~version:version ~sdocs:_common_options ~doc ~man

let _ =
  match Term.eval cmd with
  | `Error _ -> exit 1
  | _ -> exit 0
